{
    "data" : [
        "\nR version 3.6.2 (2019-12-12) -- \"Dark and Stormy Night\"\nCopyright (C) 2019 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR è un software libero ed è rilasciato SENZA ALCUNA GARANZIA.\nSiamo ben lieti se potrai redistribuirlo, ma sotto certe condizioni.\nScrivi 'license()' o 'licence()' per dettagli su come distribuirlo.\n\nR è un progetto di collaborazione con molti contributi esterni.\nScrivi 'contributors()' per maggiori informazioni e 'citation()'\nper sapere come citare R o i pacchetti di R nelle pubblicazioni.\n\n",
        "Scrivi 'demo()' per una dimostrazione, 'help()' per la guida in linea, o\n'help.start()' per l'help navigabile con browser HTML.\nScrivi 'q()' per uscire da R.\n\n",
        "> ",
        "#",
        "> ",
        "# This is a Shiny web application. You can run the application by clicking",
        "> ",
        "# the 'Run App' button above.",
        "> ",
        "#",
        "> ",
        "# Find out more about building applications with Shiny here:",
        "> ",
        "#",
        "> ",
        "#    http://shiny.rstudio.com/",
        "> ",
        "#",
        "> ",
        "",
        "> ",
        "#Make a README",
        "> ",
        "#https://www.makeareadme.com/",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "milanpollution <- function()",
        "+ ",
        " {",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "    loadlibreries()",
        "+ ",
        "    url = a(\"Comune di Milano\", href=\"https://dati.comune.milano.it/dataset\")",
        "+ ",
        "",
        "+ ",
        "    flat_ds2019= scraping(\"698a58e6-f276-44e1-92b1-3d2b81a4ad47\")",
        "+ ",
        "    ds2019 = datacleaning(flat_ds2019)",
        "+ ",
        "    flat_ds2018 = scraping(\"ea80c691-74bd-4356-94b6-0f446f190c0b\")",
        "+ ",
        "",
        "+ ",
        "    ds2018 = datacleaning(flat_ds2018)",
        "+ ",
        "    flat_ds2017= scraping(\"a032a06e-24c2-4df1-ac83-d001e9ddc577\")",
        "+ ",
        "    ds2017 =datacleaning(flat_ds2017)",
        "+ ",
        "",
        "+ ",
        "    test =ds2019",
        "+ ",
        "",
        "+ ",
        "    # Define UI for application",
        "+ ",
        "    ui <- fluidPage(",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "        titlePanel(  h1(id=\"big-heading\", \"Milan Pollution Analisys\")),",
        "+ ",
        "        tags$style(HTML(\"#big-heading{ color: #7c795d; font-family: 'Raleway',sans-serif; font-size: 48px; font-weight: 600; line-height: 27px; margin: 0 0 10px; text-align: center; }\")),",
        "+ ",
        "",
        "+ ",
        "        hr(),",
        "+ ",
        "        navbarPage(\"Pollution Milan\",",
        "+ ",
        "                   tabPanel(\"Pollution\",",
        "+ ",
        "",
        "+ ",
        "        sidebarLayout(",
        "+ ",
        "            sidebarPanel(",
        "+ ",
        "                # Dropdown menu for selecting variable from GE data.",
        "+ ",
        "                selectInput(\"pollutant\",",
        "+ ",
        "                            label = \"Select pollutant type\",",
        "+ ",
        "                            choices = unique(test$inquinante),",
        "+ ",
        "                            selected = \"PM10\"),",
        "+ ",
        "                 # Default selection",
        "+ ",
        "                sliderInput(\"lag\",",
        "+ ",
        "                            \"Forecasting lags:\",",
        "+ ",
        "                            min = 1,  max = 50, value = 10),",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "                br(),",
        "+ ",
        "                checkboxInput(\"regression\", \"Show Regression line\", TRUE),",
        "+ ",
        "                hr(),",
        "+ ",
        "                helpText(\"Data from openData\",url),",
        "+ ",
        "                hr(),",
        "+ ",
        "                br(),",
        "+ ",
        "                selectInput(\"years\",",
        "+ ",
        "                            label = \"Select the year\",",
        "+ ",
        "                            choices = c(\"2019\",\"2018\",\"2017\"),",
        "+ ",
        "                            selected = \"2019\"),",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "            ),",
        "+ ",
        "",
        "+ ",
        "            mainPanel(",
        "+ ",
        "",
        "+ ",
        "               # plotOutput(\"Timeseries\"),",
        "+ ",
        "                plotlyOutput('Timeseries'),",
        "+ ",
        "",
        "+ ",
        "plotlyOutput(\"Forecast2\"),",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "            ),",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "        ) ),",
        "+ ",
        "",
        "+ ",
        "        tabPanel(\"Stations\",",
        "+ ",
        "                 sidebarLayout(",
        "+ ",
        "                     sidebarPanel(",
        "+ ",
        "                         helpText(\"Data from openData\",url),",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "                     ),",
        "+ ",
        "",
        "+ ",
        "                 mainPanel(",
        "+ ",
        "",
        "+ ",
        "                     plotOutput(\"stations_plot\"),",
        "+ ",
        "",
        "+ ",
        "                 ))",
        "+ ",
        "",
        "+ ",
        "                 ),",
        "+ ",
        "        tabPanel(\"About\")",
        "+ ",
        "        ),",
        "+ ",
        "    )",
        "+ ",
        "",
        "+ ",
        "    # Define server logic required to draw plots",
        "+ ",
        "    server <- function(input, output) {",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "        output$stations_plot <- renderPlot(",
        "+ ",
        "        {",
        "+ ",
        "",
        "+ ",
        "           flat =  checkyears(input$years, TRUE)",
        "+ ",
        "           df =  stazioni_clean(flat)",
        "+ ",
        "           ggplot(df, aes(x=station_id, y=total_detected, fill=station_id)) +",
        "+ ",
        "           geom_bar(stat=\"identity\",color=\"black\")+theme_minimal()+theme(plot.title = element_text(size=18, face=\"bold\"))+ggtitle(paste(\"Number of detected datas from each station year:\",input$years))",
        "+ ",
        "",
        "+ ",
        "        })",
        "+ ",
        "",
        "+ ",
        "        output$Timeseries <- renderPlotly({",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "            test = checkyears(input$years, FALSE)",
        "+ ",
        "            # Render timeseries plot",
        "+ ",
        "            inp = input$pollutant",
        "+ ",
        "",
        "+ ",
        "            poll = subset(test,subset= inquinante==inp)",
        "+ ",
        "            poll= poll[,c('data','valore')]",
        "+ ",
        "            if(input$regression)",
        "+ ",
        "            {",
        "+ ",
        "                fit <- lm( poll$valore ~ poll$data, data = poll)",
        "+ ",
        "",
        "+ ",
        "                plot_ly(x = poll$data, y = poll$valore, name =\"values \",type = 'scatter',mode = 'line')%>%",
        "+ ",
        "                layout(title = paste('Value of ',inp, \"per day of \", input$years),",
        "+ ",
        "                       xaxis = list(title = 'Days'),",
        "+ ",
        "                       yaxis = list (title = paste('Value of ',inp))) %>%",
        "+ ",
        "                add_lines(x = ~poll$data, y = fitted(fit), name=\"regression\")",
        "+ ",
        "",
        "+ ",
        "            }",
        "+ ",
        "",
        "+ ",
        "            else",
        "+ ",
        "            {",
        "+ ",
        "                plot_ly(x = poll$data, y = poll$valore, name =\"values \",type = 'scatter',mode = 'line')%>%",
        "+ ",
        "                    layout(title = paste('Value of ',inp, \"per day of \", input$years),",
        "+ ",
        "                           xaxis = list(title = 'Days'),",
        "+ ",
        "                           yaxis = list (title = paste('Value of ',inp)))",
        "+ ",
        "            }",
        "+ ",
        "        })",
        "+ ",
        "",
        "+ ",
        "        output$Forecast<- renderPlotly({",
        "+ ",
        "",
        "+ ",
        "            test = checkyears(input$years,FALSE)",
        "+ ",
        "",
        "+ ",
        "            inp = input$pollutant",
        "+ ",
        "            poll = subset(test,subset= inquinante==inp)",
        "+ ",
        "            poll= poll[,c('data','valore')]",
        "+ ",
        "            #ggplot(poll, aes(x=data,y=valore, group=1, color=valore))+geom_point()+geom_line()+ geom_smooth(method=\"lm\")",
        "+ ",
        "            time = poll$data = NULL",
        "+ ",
        "            time.ts = as.ts(poll)",
        "+ ",
        "            fit = auto.arima(time.ts)",
        "+ ",
        "",
        "+ ",
        "            # Render a forecast plot",
        "+ ",
        "            plot(forecast(fit,input$lag))",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "        })",
        "+ ",
        "",
        "+ ",
        "        output$Forecast2<- renderPlot({",
        "+ ",
        "",
        "+ ",
        "            test = checkyears(input$years,FALSE)",
        "+ ",
        "",
        "+ ",
        "            inp = input$pollutant",
        "+ ",
        "            poll = subset(test,subset= inquinante==inp)",
        "+ ",
        "            poll= poll[,c('data','valore')]",
        "+ ",
        "            ggplot(poll, aes(x=data,y=valore, group=1, color=valore))+geom_point()+geom_line()+ geom_smooth(method=\"lm\")",
        "+ ",
        "            time = poll$data = NULL",
        "+ ",
        "            time.ts = as.ts(poll)",
        "+ ",
        "            fit = auto.arima(time.ts)",
        "+ ",
        "",
        "+ ",
        "            forc =forecast(fit,input$lag)",
        "+ ",
        "            plot(forecast(fit, input$lag))",
        "+ ",
        "",
        "+ ",
        "           # plot_ly(p)",
        "+ ",
        "            #    layout(title = paste('Value of ',inp, \"per day of \", input$years),",
        "+ ",
        "             #          xaxis = list(title = 'Days'),",
        "+ ",
        "              #         yaxis = list (title = paste('Value of ',inp)))",
        "+ ",
        "",
        "+ ",
        "            # Render a forecast plot",
        "+ ",
        "            #plot(forecast(fit,input$lag))",
        "+ ",
        "        })",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "           }",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "    # Run the application",
        "+ ",
        "    shinyApp(ui = ui, server = server)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "loadlibreries <- function()",
        "+ ",
        "{",
        "+ ",
        "    require(shiny)",
        "+ ",
        "    require(ggplot2)",
        "+ ",
        "    require(forecast)",
        "+ ",
        "    require(xts)",
        "+ ",
        "    require(ckanr)",
        "+ ",
        "    require(httr)",
        "+ ",
        "    require(jsonlite)",
        "+ ",
        "    require(tidyverse)",
        "+ ",
        "    require(plotly)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "scraping <- function(id)",
        "+ ",
        "{",
        "+ ",
        "    url <- paste0(\"http://dati.comune.milano.it/api/action/\",",
        "+ ",
        "                  \"datastore_search?\", paste(\"resource_id=\", id,\"&limit=10000\", sep=\"\"))",
        "+ ",
        "    page <- GET(url) # API request",
        "+ ",
        "    status_code(page) # # Check that the call is successful",
        "+ ",
        "    leggo_list <- fromJSON(url)",
        "+ ",
        "    leggo <- leggo_list$result$records",
        "+ ",
        "",
        "+ ",
        "    return(leggo)",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "stazioni_clean <- function(file)",
        "+ ",
        "{",
        "+ ",
        "    file$valore = as.double(file$valore)",
        "+ ",
        "    file$inquinante = as.factor(file$inquinante)",
        "+ ",
        "    file$stazione_id = factor(file$stazione_id)",
        "+ ",
        "    file = file[complete.cases(file),]",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "    i = sort(unique(file$stazione_id))",
        "+ ",
        "    df = data.frame()",
        "+ ",
        "    for(j in i)",
        "+ ",
        "    {",
        "+ ",
        "        missing = file$stazione_id == j",
        "+ ",
        "        lis = list(j,length(file$stazione_id[missing]))",
        "+ ",
        "        df = rbind(df,lis,stringsAsFactors=FALSE)",
        "+ ",
        "    }",
        "+ ",
        "    colnames(df)= c(\"station_id\",\"total_detected\")",
        "+ ",
        "",
        "+ ",
        "    return(df)",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "datacleaning <- function(leggo)",
        "+ ",
        "{",
        "+ ",
        "    Data = leggo",
        "+ ",
        "    Data$stazione_id=NULL",
        "+ ",
        "    Data$`_id`=NULL",
        "+ ",
        "    Data$valore = as.double(Data$valore)",
        "+ ",
        "    Data$inquinante = as.factor(Data$inquinante)",
        "+ ",
        "    Data = Data[complete.cases(Data),]",
        "+ ",
        "    Data$data = as.Date(Data$data)",
        "+ ",
        "    test = aggregate(valore~ data+inquinante, Data , mean)",
        "+ ",
        "",
        "+ ",
        "    return (test)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "checkyears  <- function(year, flat)",
        "+ ",
        "{",
        "+ ",
        "",
        "+ ",
        "    if(flat)",
        "+ ",
        "    {",
        "+ ",
        "        if(year==\"2019\")",
        "+ ",
        "        {",
        "+ ",
        "            return(flat_ds2019)",
        "+ ",
        "        }",
        "+ ",
        "        if(year==\"2018\")",
        "+ ",
        "        {",
        "+ ",
        "            return(flat_ds2018)",
        "+ ",
        "        }",
        "+ ",
        "        if(year==\"2017\")",
        "+ ",
        "        {",
        "+ ",
        "            return(flat_ds2017)",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "    if(year==\"2019\")",
        "+ ",
        "    {",
        "+ ",
        "        return(ds2019)",
        "+ ",
        "    }",
        "+ ",
        "    if(year==\"2018\")",
        "+ ",
        "    {",
        "+ ",
        "        return(ds2018)",
        "+ ",
        "    }",
        "+ ",
        "    if(year==\"2017\")",
        "+ ",
        "    {",
        "+ ",
        "        return(ds2017)",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "installpack <- function()",
        "+ ",
        "{",
        "+ ",
        "    i =c(\"shiny\",\"ggplot2\",\"forecast\",\"xts\",\"ckanr\",\"httr\",\"jsonlite\",\"tidyverse\",\"plotly\")",
        "+ ",
        "    for(j in i)",
        "+ ",
        "        if(!require(j))",
        "+ ",
        "            install.packages(j)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "milanpollution()",
        "Loading required package: shiny\n",
        "Loading required package: ggplot2\n",
        "Loading required package: forecast\n",
        "Registered S3 method overwritten by 'xts':\n  method     from\n  as.zoo.xts zoo \n",
        "Registered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n",
        "Registered S3 methods overwritten by 'forecast':\n  method             from    \n  fitted.fracdiff    fracdiff\n  residuals.fracdiff fracdiff\n",
        "Loading required package: xts\n",
        "Loading required package: zoo\n",
        "\nAttaching package: ‘zoo’\n\n",
        "The following objects are masked from ‘package:base’:\n\n    as.Date, as.Date.numeric\n\n",
        "Loading required package: ckanr\n",
        "Loading required package: DBI\n",
        "Loading required package: httr\n",
        "Loading required package: jsonlite\n",
        "\nAttaching package: ‘jsonlite’\n\n",
        "The following object is masked from ‘package:shiny’:\n\n    validate\n\n",
        "Loading required package: tidyverse\n",
        "[30m-- [1mAttaching packages[22m --------------------------------------- tidyverse 1.3.0 --[39m\n",
        "[30m[32m√[30m [34mtibble [30m 2.1.3     [32m√[30m [34mdplyr  [30m 0.8.3\n[32m√[30m [34mtidyr  [30m 1.0.0     [32m√[30m [34mstringr[30m 1.4.0\n[32m√[30m [34mreadr  [30m 1.3.1     [32m√[30m [34mforcats[30m 0.4.0\n[32m√[30m [34mpurrr  [30m 0.3.3     [39m\n",
        "[30m-- [1mConflicts[22m ------------------------------------------ tidyverse_conflicts() --\n[31mx[30m [34mdplyr[30m::[32mchanges()[30m     masks [34mckanr[30m::changes()\n[31mx[30m [34mdplyr[30m::[32mfilter()[30m      masks [34mstats[30m::filter()\n[31mx[30m [34mdplyr[30m::[32mfirst()[30m       masks [34mxts[30m::first()\n[31mx[30m [34mpurrr[30m::[32mflatten()[30m     masks [34mjsonlite[30m::flatten()\n[31mx[30m [34mdplyr[30m::[32mlag()[30m         masks [34mstats[30m::lag()\n[31mx[30m [34mdplyr[30m::[32mlast()[30m        masks [34mxts[30m::last()\n[31mx[30m [34mjsonlite[30m::[32mvalidate()[30m masks [34mshiny[30m::validate()[39m\n",
        "Loading required package: plotly\n",
        "Error in plotlyOutput(\"Timeseries\") : \n  non trovo la funzione \"plotlyOutput\"\n",
        "Inoltre: ",
        "Warning message:\n",
        "In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :",
        "\n ",
        " there is no package called ‘plotly’\n",
        "> ",
        "installpack <- function()",
        "+ ",
        "{",
        "+ ",
        "    i =c(\"shiny\",\"ggplot2\",\"forecast\",\"xts\",\"ckanr\",\"httr\",\"jsonlite\",\"tidyverse\",\"plotly\")",
        "+ ",
        "    for(j in i)",
        "+ ",
        "        if(!require(j))",
        "+ ",
        "            install.packages(j)",
        "+ ",
        "}",
        "> ",
        "milanpollution()",
        "Loading required package: plotly\n",
        "Error in plotlyOutput(\"Timeseries\") : \n  non trovo la funzione \"plotlyOutput\"\n",
        "Inoltre: ",
        "Warning message:\n",
        "In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :",
        "\n ",
        " there is no package called ‘plotly’\n",
        "> ",
        "installpack <- function()",
        "+ ",
        "{",
        "+ ",
        "    i =c(\"shiny\",\"ggplot2\",\"forecast\",\"xts\",\"ckanr\",\"httr\",\"jsonlite\",\"tidyverse\",\"plotly\")",
        "+ ",
        "    for(j in i)",
        "+ ",
        "        if(!require(j))",
        "+ ",
        "            install.packages(j)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "installpack()",
        "Loading required package: j\n",
        "Error in install.packages : Updating loaded packages\n",
        "Loading required package: j\n",
        "Error in install.packages : Updating loaded packages\n",
        "Loading required package: j\n",
        "Error in install.packages : Updating loaded packages\n",
        "Loading required package: j\n",
        "Error in install.packages : Updating loaded packages\n",
        "Loading required package: j\n",
        "Error in install.packages : Updating loaded packages\n",
        "Loading required package: j\n",
        "Error in install.packages : Updating loaded packages\n",
        "Loading required package: j\n",
        "Error in install.packages : Updating loaded packages\n",
        "Loading required package: j\n",
        "Error in install.packages : Updating loaded packages\n",
        "Loading required package: j\n",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        3,
        2,
        3,
        2,
        3,
        2,
        3,
        2,
        3,
        2,
        3,
        2,
        3,
        2,
        3,
        2
    ]
}